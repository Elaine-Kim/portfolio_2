{"version":3,"sources":["routes.js","App.js","serviceWorker.js","index.js"],"names":["Main","React","lazy","About","Works","Detail","Contact","routes","path","name","component","exact","App","basename","process","fallback","className","map","route","idx","key","render","props","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAEMA,EAAOC,IAAMC,MAAK,kBAAM,6DACxBC,EAAQF,IAAMC,MAAK,kBAAM,6DACzBE,EAAQH,IAAMC,MAAK,kBAAM,sDACzBG,EAASJ,IAAMC,MAAK,kBAAM,6DAC1BI,EAAUL,IAAMC,MAAK,kBAAM,gCAgDlBK,EA7CA,CACb,CAAEC,KAAM,IAAKC,KAAM,OAAQC,UAAWV,EAAMW,OAAO,GACnD,CAAEH,KAAM,QAASC,KAAM,OAAQC,UAJpBT,IAAMC,MAAK,kBAAM,uDAIoBS,OAAO,GACvD,CAAEH,KAAM,SAAUC,KAAM,QAASC,UAAWP,EAAOQ,OAAO,GAC1D,CAAEH,KAAM,SAAUC,KAAM,QAASC,UAAWN,EAAOO,OAAO,GAC1D,CAAEH,KAAM,aAAcC,KAAM,MAAOC,UAAWL,EAAQM,OAAO,GAC7D,CACEH,KAAM,qBACNC,KAAM,cACNC,UAAWL,EACXM,OAAO,GAET,CACEH,KAAM,qBACNC,KAAM,cACNC,UAAWL,EACXM,OAAO,GAET,CACEH,KAAM,mBACNC,KAAM,YACNC,UAAWL,EACXM,OAAO,GAET,CACEH,KAAM,qBACNC,KAAM,cACNC,UAAWL,EACXM,OAAO,GAET,CACEH,KAAM,qBACNC,KAAM,cACNC,UAAWL,EACXM,OAAO,GAET,CACEH,KAAM,qBACNC,KAAM,cACNC,UAAWL,EACXM,OAAO,GAET,CAAEH,KAAM,WAAYC,KAAM,UAAWC,UAAWJ,EAASK,OAAO,IChBnDC,EA/BH,WAOV,OACE,kBAAC,IAAD,CAAQC,SAAUC,gBAEhB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SATd,yBAAKC,UAAU,oCACb,yBAAKA,UAAU,kCASVT,EAAOU,KAAI,SAACC,EAAOC,GAClB,OAAOD,EAAMR,UACX,kBAAC,IAAD,CACEU,IAAKD,EACLX,KAAMU,EAAMV,KACZG,MAAOO,EAAMP,MACbF,KAAMS,EAAMT,KACZY,OAAQ,SAACC,GAAD,OACN,kBAACJ,EAAMR,UAAcY,MAGvB,YCfIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f1e513a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Main = React.lazy(() => import('./pages/Main/Main'));\r\nconst About = React.lazy(() => import('./pages/About/About'));\r\nconst Works = React.lazy(() => import('./pages/Works/Works'));\r\nconst Detail = React.lazy(() => import('./pages/Works/Detail'));\r\nconst Contact = React.lazy(() => import('./pages/Contact/Contact'));\r\nconst Test = React.lazy(() => import('./pages/Main/Test'));\r\n\r\nconst routes = [\r\n  { path: '/', name: 'Main', component: Main, exact: true },\r\n  { path: '/test', name: 'Test', component: Test, exact: true },\r\n  { path: '/about', name: 'About', component: About, exact: true },\r\n  { path: '/works', name: 'Works', component: Works, exact: true },\r\n  { path: '/works/tms', name: 'TMS', component: Detail, exact: true },\r\n  {\r\n    path: '/works/buyerportal',\r\n    name: 'BuyerPortal',\r\n    component: Detail,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: '/works/fulfillment',\r\n    name: 'Fulfillment',\r\n    component: Detail,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: '/works/returnman',\r\n    name: 'Returnman',\r\n    component: Detail,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: '/works/shippingman',\r\n    name: 'Shippingman',\r\n    component: Detail,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: '/works/sweetspotFO',\r\n    name: 'SweetspotFO',\r\n    component: Detail,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: '/works/sweetspotBO',\r\n    name: 'SweetspotBO',\r\n    component: Detail,\r\n    exact: true,\r\n  },\r\n  { path: '/contact', name: 'Contact', component: Contact, exact: true },\r\n];\r\n\r\nexport default routes;\r\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport routes from '../src/routes';\n\nconst App = () => {\n  const loading = () => (\n    <div className=\"animated fadeIn pt-1 text-center\">\n      <div className=\"sk-spinner sk-spinner-pulse\"></div>\n    </div>\n  );\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      {/* <Router> */}\n      <Switch>\n        <Suspense fallback={loading()}>\n          {routes.map((route, idx) => {\n            return route.component ? (\n              <Route\n                key={idx}\n                path={route.path}\n                exact={route.exact}\n                name={route.name}\n                render={(props) => (\n                  <route.component {...props}></route.component>\n                )}\n              />\n            ) : null;\n          })}\n        </Suspense>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}